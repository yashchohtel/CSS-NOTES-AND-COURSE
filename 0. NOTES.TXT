


<<<<<<< HEAD
QUE 1 :- What is CSS
Css stands for Cascading Style Sheets (css). It is a stylesheet language sued to descride the look And presentation of a document writen in HTML or XML. It defines how elements are displayed on a web page. Css makes website visually appealing and user-friendly.

--------------------------------------------------------

QUE 2 :- Creators and Maintenance of CSS?
. Css was created by a group of indivisuals known as the world wide web consortium (W3C).
. Primary contributors include Hakon Wiem Lie and Bert Bos.
. Css standards and specifications are maintained by the W3C.
. A community of web developers, designers, and browser vendors also contribute to its evolution.
. Regular updates and new versions ensue css remais relevant and adaptable to changing web design needs.


--------------------------------------------------------

QUE 3 :- CSS Rule structure ?
. A css rule consists of a selector and a declaration block.
. declaration are used to define the style properties for the selector elements.
. Each declaration consists of a property and a value.

selector {
    property: value;
}

h1 {
    color: red;
    font-size: 32px;
}

here h1 is selector curly brackets are declaration block and color is property and red is value of the property.


--------------------------------------------------------

QUE 4 :- Three Ways to write css?
. Inline CSS -> Style applied directly to on html element using the style attribute.
<h1 style="color: blue;" >THIS IS HEADING</h1>.

. Internal CSs -> Styles defined within the <style> tag within the HTML document's <head>.
<style>
    h1 {
        color: white;
        font-size: 12px;
    }
</style>

. External CSS -> Styles stored in separate .css files linked to the html document using the <link> element. 
<link rel="stylesheet" href="css file link">

--------------------------------------------------------

QUE 5 :- What is css selectors?
CSS selectors are used to "find" (or select) the HTML elements you want to style.

What is css selectors?
CSS selectors are used to "find" (or select) the HTML elements you want to style.

----------------

[I. SIMPLE SELECTOR]

1. Universal selector -> The universal selector (*) selects all HTML elements on the page.

Example
The CSS rule below will affect every HTML element on the page: 

* {
  text-align: center;
  color: blue;
}

2. CSS element Selector -> The element selector selects HTML elements based on the element name.
Example
Here, all <p> elements on the page will be center-aligned, with a red text color: 

p {
  text-align: center;
  color: red;
}

3. CSS id Selector -> The id selector uses the id attribute of an HTML element to select a specific element.
The id of an element is unique within a page, so the id selector is used to select one unique element!
To select an element with a specific id, write a hash (#) character, followed by the id of the element.

Example
The CSS rule below will be applied to the HTML element with id="para1":
Note: An id name cannot start with a number!

#para1 {
  text-align: center;
  color: red;
}


4. CSS class Selector -> The class selector selects HTML elements with a specific class attribute.
To select elements with a specific class, write a period (.) character, followed by the class name.
different element can have same class selector and one element can have more than one class.

Example
In this example all HTML elements with class="center" will be red and center-aligned: 

.center {
  text-align: center;
  color: red;
}

You can also specify that only specific HTML elements should be affected by a class.

Example
In this example only <p> elements with class="center" will be red and center-aligned: 

p.center {
    text-align: center;
    color: red;
}

HTML elements can also refer to more than one class.

Example
In this example the <p> element will be styled according to class="center" and to class="large": 

<p class="center large">This paragraph refers to two classes.</p>

----------------

[II. COMBINATORY SELECTORS]

1. Descendant Selector -> The descendant selector matches all elements that are descendants of a specified element.

The following example selects all <p> elements inside <div> elements: 

Example
div p {
  background-color: yellow;
}

2. Child Selector (>) -> The child selector selects all elements that are the children of a specified element.

The following example selects all <p> elements that are children of a <div> element:

Example
div > p {
  background-color: yellow;
}

3. Adjacent Sibling Selector (+) -> The adjacent sibling selector is used to select an element that is directly after another specific element.

Sibling elements must have the same parent element, and "adjacent" means "immediately following".

The following example selects the first <p> element that are placed immediately after <div> elements:

Example
div + p {
  background-color: yellow;
}

4. General Sibling Selector (~) -> The general sibling selector selects all elements that are next siblings of a specified element.

The following example selects all <p> elements that are next siblings of <div> elements: 

Example
div ~ p {
  background-color: yellow;
}

----------------

[III. ATTRIBUTE SELECTOR]

CSS Attribute selector ->The [attribute] selector is used to select elements with a specified attribute or its value.

1. CSS [attribute] Selector -> it is used to select the element which has the given attribute
The [attribute] selector is used to select elements with a specified attribute.

The following example selects all <a> elements with a target attribute:

Example
a[target] {
  background-color: yellow;
}

2. CSS [attribute="value"] Selector -> The [attribute="value"] selector is used to select elements with a specified attribute and value.

The following example selects all <a> elements with a target="_blank" attribute:

Example
a[target="_blank"] {
  background-color: yellow;
}

3. CSS [attribute~="value"] Selector -> The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.

The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":

Example
[title~="flower"] {
  border: 5px solid yellow;
}

The example above will match elements with title="flower", title="summer flower", and title="flower new", but not title="my-flower" or title="flowers".

4. CSS [attribute^="value"] Selector -> The [attribute^="value"] selector is used to select elements with the specified attribute, whose value starts with the specified value.

The following example selects all elements with a class attribute value that starts with "top":

Note: The value does not have to be a whole word!

Example
[class^="top"] {
  background: yellow;
}

5. CSS [attribute|="value"] Selector -> The [attribute|="value"] selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-).

Note: The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text".

Example
[class|="top"] {
  background: yellow;
}

6. CSS [attribute$="value"] Selector -> The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value.

The following example selects all elements with a class attribute value that ends with "test":

Note: The value does not have to be a whole word!  

Example
[class$="test"] {
  background: yellow;
}

7. CSS [attribute*="value"] Selector -> The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value.

The following example selects all elements with a class attribute value that contains "te":

Note: The value does not have to be a whole word!  

Example
[class*="te"] {
  background: yellow;
}

----------------

[IV. PSEUDO-CLASSES]

CSS Pseudo-classes -> A pseudo-class is used to define a special state of an element.
For example, it can be used to:
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

Syntax
The syntax of pseudo-classes:

selector:pseudo-class {
  property: value;
}

An example of using the :hover pseudo-class on a <div> element:

Example
div:hover {
  background-color: blue;
}

-------------

01. :first-child -> used to select the first child of any parent
li:first-child {
    border: 1px solid black;
}


02. :last-child -> used to select the last child of any parent
li:last-child {
    border: 1px solid black;
}

03. :nth-child() -> used to select the nth number of child and we can use calculation to select like given bellow
li:nth-child(3){
    border: 1px solid black;
}

it work as a calculation 
li:nth-child(2n+1){
    background-color: blue;
}

04. :nth-last-child() -> it work similar as nth-child but starts from last
li:nth-last-child(2){
    border: 1px solid black;
}

05. :nth-of-type() -> it select the element of given value if its has direct parent or not
li:nth-of-type(1) {
    background-color: blue;
}

06. :nth-last-of-type() -> it select the element of given value if its has direct parent or not it start selection from last
li:nth-last-of-type(1) {
    background-color: blue;
}

07. :only-child -> it select the child of an element which has only one child if parent has two child it will not work
li:only-child{
    background-color: blue;
}

08. :only-of-type -> it select the child of parent elemnt which have only all different type of element child or only child. if there is similar child in parent it will not work
b:only-of-type {
    background-color: blue;
}

09. :first-of-type -> it will select only first child of an parent element
or it can also select if it has parent or not.
p:first-of-type {
    background-color: blue;
}

10. :last-of-type -> it will select only last child of an parent element
or it can also select if it has parent or not.
p:last-of-type {
    background-color: blue;
}

11. :empty -> it will select the empty element. if element has white space it will not work
div:empty {
    background-color: rgb(111, 255, 0);
}


12. :not() -> it will select all the element other than what we write in its parameter
p:not(.test) {
    background-color: rgb(255, 39, 39);
}

13. :lang() -> it select the text containing element by the different attribute of language.
p:lang(en){
    color: blue;
}

14. :link -> it is only used to select the a tag we can also just simply select a tag style it.
ul a:link{
    background-color: blue;
}

15. :hover -> it is used to style the element when the cursior of mouse over an element. 
ul a:hover{
    background-color: blue;
}

16. :visited -> it is only used to style link tag when once it visited
ul a:visited{
    background-color: blue;
}

17. :active -> it is used to style element when the element it clicked or mouse left button is pressed over an element.
p:active{
    background-color: blue;
}

18. :target -> it select the targeted element 
p:target{
    background-color: blue;
}

===== PSEUDO CLASSES USED TO STYLE FORMS ======
19. :focus -> it is used to style an input tag when the input is focoused to clicked to input data.
input:focus{
    background-color: green;
}

20. :checked -> it is used to style checkbox and radio when somethink is ckecked 
input[type='checkbox']:checked{
   box-shadow: 0 0 0 3px red;
}

21. :disabled -> it is used to select the input box which is disabled
input[type='text']:disabled{
   box-shadow: 0 0 0 3px red;
}

22. :enabled -> it is used to select the input which is enabled
input[type='text']:enabled{
   box-shadow: 0 0 0 3px red;
}

23. :required -> it is used to select the input which has attribute required
   input[type='text']:required{
   box-shadow: 0 0 0 3px red;
}

24. :optional -> it is used to select the input which does not have required attribute or it is optional.
input[type='text']:optional{
   box-shadow: 0 0 0 3px red;
}

25. :in-range -> it only work with number input tag it is use to select when input is in range.
input:in-range{
    background-color: blue;
}

26. :out-of-range -> it only work with number input tag it is use to select when input value if out of range
input:out-of-range {
    background-color: blue;
}

27. :read-only -> it is used to select the input which has the attribute readonly
input:read-only {
    background-color: blue;
}

28. :read-write -> it is used to select the input which does not have attribute readonly which is by default read-write
input:read-write {
    background-color: blue;
}

29. :valid -> it is used to select and style an input tag when input data is valid
input[type='email']:valid {
    background-color: blue;
}

30. :valid -> it is used to select and style an input tag when input data is invalid
input[type='email']:invalid {
    background-color: blue;
}

31. :default -> it is only used with checkbox radio or option input tag to style its default inputs value
input:default {
    box-shadow: 0 0 0 3px red;
}

32. :root -> it is used to create variables in css file
:root{
    --color-blue:blue;
}

32. :is() -> it is used to reduce the line of code to select different element of a same parent

-> .test1 :is(h1, p, h3){
    background-color: blue;
}

-> :is(.test1, .test2) h1, h3{
    color: blue;
}

-> :is(.test1, .test2) :is(h1, h3){
    color: blue;
    border: 1px solid black;
}

-> :is(.test1, .test2) :is(h1, h3):hover{
    color: blue;
    border: 1px solid black;
}

33. :placeholder-shown -> it only work with input and textarea it is used to style the input field and textarea when placeholder is shown.
input:placeholder-shown{
    border: 3px solid red;
}

34. :focous-within -> it is used to select the body of any input tag we focous it applay the givven style to the parent
form:focus-within{
    background-color: hotpink;
}

35. :fullscreen -> it is used to style the element when it fullscreen by the javascript
#box:fullscreen{
    background-color: hotpink;
    font-size: 30px;
}

36. :has() -> it is used to select the parent by providing child in parameter it.
-> div:has(h4){
    background-color: hotpink;
}

----------------

[IV. PSEUDO-ELEMENT]

p::first-line{
    font-size: 35px;
} 
it is used to style spefiic line of a content.

p::first-word{
    font-size: 35px;
} 
it is used to style spefiic word of a content.


h2::before{
    content: "hi my name is yash";
} 
it is used to add content before an element


h2::after{
    content: "hi my name is yash";
}
it is used to add content after an element


::selection{
    color: red;
    background-color: blue;
} 
it is used to add selection property

--------------------------------------------------------

QUE 6 :- What is INITIAL and INTARIT ?

initial is the by default property of which css have. and inharit is when it take property of its parent
color: initial; it will take the by default color;
color: inherit; it will take the color of its parent container.

--------------------------------------------------------

QUE 7 :- What is colors in css ?

colors are used to add colors on element. color is added by color property
ex - color: red;
in css colors can be specified using color name, rgb, rgba, hex code, hsl

1. color name => simple colors modern browsers suport 140 named colors.
ex- red, blue, etc.

2. rgb => rgb(red,green,blue). we have to give red green and blue its points betwwen 0 to 255. 

The rgb() function define colors using the Red-green-blue (RGB) model. An RGB color value is specified with: rgb(red, green, blue). Each parameter defines the intensity of that color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).

rgb(0,0,0) => black
rgb(255,255,255) => white
rgb(255,0,0) => red
rgb(0,255,0) => green
rgb(0,0,255) => blue

3. rgba =>  rgba(red,green,blue,alpha)
alpha parameter is a number between 0-1, 0.0(fully transparent) and 1.0 (not transparent at all)
ex- rgba(255,255,255,0.7)

4.hex => #rrggbb rr(red), gg(green), bb(blue) hexadecimal value between 00 and ff (same as deficmal 0-255)
red:#ff0000;
red:#000000;
red:#ffffff;

5.hsl => hsl(hue,saturation,lightness)
ex- RED:hsl(0,100%,50%)

HUE is a degree on the color wheel from 0 to 360. 0is red, 120 is green, and 240 is blue.
SATURARION is percentage value, 0% means a shade of gray, and 100% is the full color. 
LIGHTNESS is also a percentage, 0% is black, 50% is neither light or dark 100% is white.

6.hsla => hsla(hue, saturation, lightness, alpha)
. alph parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent al all)
ex- ex- RED:hsla(0,100%,50%,0.5)

HUE - A pure color
TINT - A pure color with just white added
SHADE - A pure color with just black added
Tone - A pure color with just grey added

--------------------------------------------------------

QUE 8 :- What is background and its property in css?

BACKGROUND we have different property for background it is used to add style in background of an element.

1. background color => it is used to add color to background of an element.
ex body{
    background-color: rgba(0, 0, 255, 0.61);
}

-------------------

2. background image => it is used to add background image to the background of an element.
ex- body {
    background-image: url(/images/mother\ bord.jpg);
}

-------------------

3. background repeat => it is used to style of repetation of image. background repeat has many values.

-------------------

background-repeat: no-repeat; (if we dont want to repeat).
repeat-x = to repeat in x axis only.
repeat-y = to repeat in y axis only.

-------------------

4. background size => it is used to add background size. it has different values.
auto => it automaticlly takes the size.
contain => it take as per the content.
cover => it take the whole window size.

we can also add background size in % and px

-------------------

5. background position => it is used to add position of a background background position property has different values.
top,center,bottom,rght,left.etc.
we can also add position in px and percentage.

-------------------

6. background attactment => it is used to add attactment to the background. it has different values.
scroll =. by default it has scroll it means it scrole with the content.
fixed => it is used to set background attactment fixed if we use fixed it will dont move.

-------------------

7. multiple images -> it is used to add multiple images on background
background: url(first-image-url), url(seocnd-image-url);
(or bhe saare property do baar likhne honge dono image ko style karne ke liye) 

-------------------

8. background-blend-mode -> The background-blend-mode property defines the blending mode of each background layer (color and/or image).

normal     - This is default. Sets the blending mode to normal	
multiply   - Sets the blending mode to multiply	
screen     - Sets the blending mode to screen	
overlay    - Sets the blending mode to overlay	
darken     - Sets the blending mode to darken	
lighten    - Sets the blending mode to lighten	
color      - dodge	Sets the blending mode to color-dodge	
saturation - Sets the blending mode to saturation	
color      - Sets the blending mode to color	
luminosity - Sets the blending mode to luminosity

-------------------

9. background-origin	Specifies where the background image(s) is/are positioned.

padding-box	Default value. The background image starts from the upper left corner of the padding edge	
background-origin: padding-box;

border-box	The background image starts from the upper left corner of the border	
background-origin: border-box;

content-box	The background image starts from the upper left corner of the content
background-origin: content-box;

-------------------

10. background-clip	Specifies the painting area of the background

border-box	Default value. The background extends behind the border	
background-clip: border-box;

padding-box	The background extends to the inside edge of the border	
background-clip: padding-box;

content-box	The background extends to the edge of the content box
background-clip: content-box;

-------------------

11. background => it is a short hand property which is used to different styles of background in once.
background: color - image - repeat - attactment - position;
background: black url(/images/mother\ bord.jpg) no-repeat fixed center;
color 
image
repeat
attactment
position

--------------------------------------------------------

QUE 9 :- What is a CSS Unit?

A CSS unit determines the size of a property you're setting for an element or its content. For example, if you wanted to set the property margin of a paragraph, you would give it a specific value. This value includes the CSS unit. Let's look at a small example: p { margin: 20px; } 

here are two type of lenght units in css -> Absolute Lengths and Relative Lengths.

------------

Absolute lengths: The absolute length units are fixed and a length expresed in any of these will appear as exactly that size.

absolute - centimeter(cm), mm(milimeter), inch(inch), px(pixel), pt(), pc(pikas)
cm - normaly centimeter
mm - normaly milimeter
in - normaly inch
px - 1px (1inch = 96px) average
pt - (1inch = 72pt) average
pc - (1inch = 12pc) average

1. Pixels (px) : px is an absolute unit in css, representing the smallest unit of screen space. It provides a fixed and consistence size on all devices and screens. 

------------

Relative Lengths: relative length units specify a length relative to another length property. Relative length units scale better between different medium.

relative - em(), rem(), vh(viewport height), vw(viewport width), %(percentage)
Em - em is relative to the size of its direct parent
Rem - rem is only relative to root (html tag) size
vh - 1% of view port height
Vw - 1% of view port width
% -  relative to parent


1. EM (em): em is a relative unit that is calculated based on the font size of the parent element. When you set an element's size in em it's relative to the font size of its nearest parent with a speified font size

2. REM (rem) :Rem (short for “root-em”) units dictate an element's font size relative to the size of the root element. By default, most browsers use a font size value of 16px. So, if the root element is 16px, an element with the value 1rem will also equal 16px.

--------------------------------------------------------

QUE 10 :- What is css fonts and text?

FONTS - the type of text is fonts.

font size - to set size of the text we use font size.
font-size: 30px;
______________________________
font weight - it is used to add font weight. we can applay bold bolder and in point 100 - 900 100 is thiner and 900 us bolder (font weight is vary in there style)
font-weight: bold;
______________________________
font-style - it is used to set font style to a text
font-style: italic;
______________________________
font variant - it is used to define variation of text
font-variant: small-caps;
______________________________
font family - it is used to add font family means style of a text .
font-family: sans-serif;

-----------------------------

CSS TEXTS

operations width text.
 
color - to add color to text.
color: red;
______________________________
text aling - to add alingment in text it has four main property right left and center and juftify. by default it is left
text-align: center;
______________________________
direction - to define direction of text by default it is left ot right. and we can make it right to left.
direction: rtl;
______________________________
text decoration - it is used to decorate the text by default it is none. we can add underline ,overline, line through line property by text decoration property.
text-decoration: underline;
______________________________
text transform - it is used to convert the text to lower case upper case and capitalize.
text-transform: lowercase;
______________________________
line height - to add space between two line of text. we applay line height.
line-height:30px;
______________________________
latter spaceing - to add space between to letters of a word.
letter-spacing: 1px;
______________________________
word spaceing - to add space between 2 words.
word-spaceing: 2px;
______________________________
text indextion - to add indextion to text. it will add padding-left on the first line of the text.
text-indent: 30px;
______________________________
white space pre - it is used to display text as it is. with br tag. we can add space and line brake on html and if we applay which space pre it will display text as it is.
white-space: pre;
______________________________
font size - it is used to define font size of a text.
font-size: 30px;
______________________________
text shadow - it is used to add shadow to text.
text-shadow: horizontal vertical blur color;
text-shadow: 5px 10px 10px coral;
______________________________
writeing mode - it is used to define write mode want to write horizontal or vertical. by default it is horizontal left to right.
writing-mode: vertical-lr;

--------------------------------------------------------

QUE 11 :- What is box model?
HEIGHT AND WIDTH -> Height and width are use to add Height and width of an element. we can add Height and width by Height and width property. we can add Height and width in px and percentage. if we add pixel it will take as per pixel and if in percentage it will take according to the parent container if 50% it will width 50% of the parent container.

#box{
    width: 50%;
    height:40%;
}

we can also add maximum and minimum to height and width
#box{
    background-color: green;
    width: 50%;
    height:50%;
    max-width: 600px;
    max-height: 800px;
    min-width: 400px;
    min-height: 300px;
} 

CSS PADDING -> PADDING is the space between border and content. we can also add padding in indivisual sides of element.

.box{
    border: 1px solid black;
    padding: 40px;
}

CSS MARGIN -> MARGIN is the psace between border and orther outer element. we can also add margin in indivisual sides of element.

.box{
    border: 1px solid black;
    margin: 30px;
}

CSS BOX MODEL

When we set the width and height property of an element width css, we just set the width and height of the of the content area. to calculate the full size of an element, you must add padding, border and margins.

Total element width = width + left-padding + right-padding + left-border + right-border + left-margin + right-margin
Total element height = height + top-padding + bottom-padding + top-border + bottom-border + top-margin + bottom-margin


CSS BOX SIZING -> CSS SIZING  

box SIZING property is use to set the behiavior of box model if we set it to content box (which is by default) it will increase the size of a box on adding margin, border, padding. it increase over all box size but if we applay box sizing border box it will stick to applay height and width and skrinks the content inside the box

box-sizing: border-box;


--------------------------------------------------------

QUE 12 :- what is css gradient?

CSS GRADIATION 

When we mix two color smoothly it is called gradient there are two type of gradient in css liear gradient and circular gradient.

linear gradient - background-image: linear-gradient(to right,#FF9933,#FFFFFF,#138808);

radial gradient - background-image: radial-gradient(circle, #138808 40%, #FFFFFF 40%, #FF993333 20%);


default and simple linear gradient 
background: linear-gradient(pink,blue);
background: linear-gradient(color-1, color-2);

three color linear gradient 
background: linear-gradient(pink,blue,yellow);
background: linear-gradient(color-1, color-2, color-3);

defining direction in linear gradient 
background: linear-gradient(to left bottom, pink,blue,yellow);
background: linear-gradient(direction, color-1, color-2, color-3);

rotating by degree in linear gradient 
background: linear-gradient(120deg, pink,blue,yellow);
background: linear-gradient(rotation value in degree, color-1, color-2, color-3);

default and simple radial gradient 
background: radial-gradient(pink,blue,yellow);
background: radial-gradient(color-1, color-2);

defining shape of a radial gradient 
background: radial-gradient(circle,pink,blue,yellow);
background: radial-gradient(shape,color-1, color-2);

defining color requirment in radial gradient 
background: radial-gradient(circle,pink 30%,blue 20%,yellow 20%);
background: radial-gradient(shape,color-1, color-2);


--------------------------------------------------------

QUE 13 :- What if filter in css?
CSS FILTER

it is used to add filter on image by css it has different property.
filter: blur(10px); - it is used to add blur filter on images.

filter: brightness(0.9); - it is used to add brightness to image

filter: contrast(10); - it is used to add contrast to images

filter: grayscale(1%); - it is used to add grayscale scale black/white effect.

filter: hue-rotate(1deg); - it is used to add hue-rotation color effect.

filter: invert(1%); - it is used to invert the images.

opacity: 1%; - it is used to add opacity to image.

--------------------------------------------------------

QUE 14 :- What is display and visibility in css?
Block and inlive level element :- A block-level element always starts on a new line and takes up the full width available. An inline element does not start on a new line and it only takes up as much width as necessary.  

The display CSS property sets whether an element is treated as a block or inline box and the layout used for its children, such as flow layout, grid or flex. Formally, the display property sets an element's inner and outer display types.

dispalay has four manin value.

block - display: block;
1. it will start in new line
2. it will take full width
3. we can add width and height

Inline - display: inline;
1. it will not start in new line
2. it will take width which is necessary
3. we can not add width and height

Inline-block - display: inline-block;
1. it will not start in new line
2. it will take width which is necessary
3. we can add width and height

none -  display: none;
it will make div diapear and also leave its place.

VISIBILITY :- The visibility CSS property shows or hides an element without changing the layout of a document. 

VISIBILITY - it is used make element hide or visible but it not leaave its place as dispalay:none;

hidden - visibility: hidden;
it will make div disapper but does not leave its place


--------------------------------------------------------

QUE 14 :- What is position in css? 

The position Property :- The position property specifies the type of positioning method used for an element.

The position property in css is used to control the positioning of elements withi a web page. It defines how an element should be placed relative to its normal position in the document flow or relative to its parent or containing elements.



There are five different position values:

static
relative
fixed
absolute
sticky

static -  position: static;
it is by default all element has static. it is a normal flow

relative - position: relative;
in position relative box move around according to its actual place and it does not leave its space.

absolute - position: absolute;
it take position according to its position parent (the parent is positioned, when its parent has position property other than static ) and it leaves it place if it is position relative and another element takes its place.

fixed - position: fixed;
it react according to viewport it take left right top bottom property according to html. and it get fixed when it's left right id defined
Elements with position: fixed; are positioned relaive tothe viewpot , so they remain in the same position even when the page is scrolld, you can use top. right, bottom, and left properties to specify the exact positon.

sticky - position: sticky;
it will move but if specified top or left value it will stick to that position and dont move after that
Elements with position: sticky; ar initially positioned according to the normal flow. but they become "sticky" and stay within the viweport once they reach a specified scroll position.

and we can define from where and how much to move an element it can be dont by applay position property

top - top: 15px;

left - left: 0;

bottom - bottom: 10px;

right - right: 20px;

LAYER AND Z-INDEX :- we can applay z-indenx only when it is position element

z-intex property in css is used to control the stacking otder of elements on a web page. it determines which should appeat in frnt of behid other behind other elements when they overlap in the same page. elements with higher z-index values are placed in front of elements with lower z-index values.

z-index:1;

the element has highest index value it will apperat at top


--------------------------------------------------------

QUE 15 :- What is overflow in css?

The css multi-coloum layout allows easy defination of multiple coloumns of text - just like in newspapers

column-count: ; -> it is used to define column, in how many column we want to display coloumn

column-rule: ; -> it is used to define rule between two coloumn

column-gap: ; -> it is used to define coloumn gap


--------------------------------------------------------

QUE 16 :- Css flexbox?
CONTAINER PROPERTY ---

New module in CSS3 to easy align elements in different directions and orders, Flexbox is to give container the  ability to expand and shrink elements to best use all the available space. Css flexbox layout replaces float layout. New way to build one-dimensional layouts.

1. flexbox -> it is used to make a container flex box and we can move container items horizontaly and vertically.
=> display: flex;

2. flex direction -> it is used to define the direction of element inside the flex container either coloumn or row.

a. flex-direction-row -> it is used to flote element of a container in a row (hoizontaly) left to right which is by defaylt. 
flex-direction: row;

b. flex-direction-row-reverse -> in row reverse it will start all the content of a continer float from the left to right in reverse order.
flex-direction: row-reverse;

c. flex direction coloumn -> it is used to define flex direction coloum flex container items flow from top to bottom vertically.
=> flex-direction: column;

d. flex direction coloumn reverse -> it is used to reverse the coloumn last element start from the first and goes to end first element will place to lsat and it start from bottom to top.
=> flex-direction: column-reverse;


3. flex-wrap -> in flex wrap it will try to wrap all the element inside the given width of a container without adjusting the origina width of an element inside the container

flex-wrap: wrap;
flex-wrap: wrap-reverse; -> it will wrap last elemnt first and then so on.
flex-wrap:no-wrap; -> it will not wrap the element which is by default.
flex-flow:direction,flex-wrap;

4. justifiy content -> it is used to align items horizontally in different style.  

.. justify-content: center; 
.. justify-content: space-between; 
.. justify-content: space-around;
.. justify-content: space-evenly;
.. justify-content: end;
.. justify-content: flex-end;
.. justify-content: start;
.. justify-content: flex-start;

5. align item -> it is used to align items vertically in different style.  

.. align-items: center;
.. align-items: baseline;
.. align-items: end;
.. align-items: flex-end;
.. align-items: self-end;
.. align-items: start;
.. align-items: flex-start;
.. align-items: self-start;

6. align-content -> it is used to set vertical alighment it work when it has 2 or more rows.

.. align-content: flex-start;
.. align-content: flex-end
.. align-content: center;
.. align-content: stretch;
.. align-content: space-around;
.. align-content: space-between;
.. align-content: space-evenly;


ITEMS PROPERTY ---

1. order -> it is used to define the order of the item of flex container we define the order in number which item contain largest it comes in last.
order:1;

2. flex-grow -> it is used to grow the item of the continer.
flex-grow:2;

3. flex-shrink -> it is used to shrink the flex items by default it has 1 but if value more then 1 it will shrink more then other element larger number shrink more
flex-shrink:1;

4. aligh-self -> it is used to aligh the seprate items of the flex container like aligh-items it is same like aligh-item property but it works in individual items 
.. align-self: center;
.. align-self: baseline;
.. align-self: flex-end;
.. align-self: self-end;
.. align-self: start;
.. align-self: flex-start;
.. align-self: self-start;
.. align-self: end;
.. align-self: auto;

5. flex-basics -> it is used to handle the width of flex items of the flex container.

6. flex -> it short hand of flex shrink, flex grow, flex basics;

flex: flex-grow, flex-shring, flex-basis:


--------------------------------------------------------

QUE 17 :- What is grid?


Grid -> it is two dimensional layouting system which helps to manage horizontal and verticl aligment at the same time.

diaplay grid -> it is used initilize a container a grid box.
display: grid; 

----------- GRID CREATION

grid-template-columns -> it is used to define number and width of the coloumns.
grid-template-columns: 200px 200px 200px; -> it will create three coloumns of 200px in width.
grid-template-columns: 200px 200px auto; -> it will create first two coloumns of 200px and third coloumns will take remaining space.
grid-template-columns: 25% 25%; -> we can also define its width in percentage. it will create 2 coloumns of 25% width of it parent container.
grid-template-columns: 1fr 1fr; -> it is used to devide the coloumns in the given frection fr means frection i will create the two coloumn of same width it will decide the fullwidth in two frection of equal width
grid-template-columns: repeat(3, 1fr); -> it is used to repeat the given coloumns width we not have to write the width of coloumn every time.
grid-template-columns: repeat(2, 200px) 1fr; it is create first two coloumn of same width and third of one frection of the container.

grid-template-rows -> we can use all the decleration same as coloumns it will works on rows.

----------- GRID GAP

grid-gap -> it is use to define gap between coloumn and rows.
gap:1rem; -> i will applay gap in row and coloumn
gap: 1rem 1rem;
gap: row-gap coloumn-gap;

----------- GRID POSITINING

grid-row-start: 2; -> it is used to tell the start line of row.
grid-row-end: 3; -> it is used to tell the end line of row.
grid-column-start: 3; -> it is used to tell the start line of coloumn.
grid-column-end: 4; -> it is used to tell the end line of coloumn.

short hand of grid-row-start, grid-row-end
grid-row: grid-row-start / grid-row-end;
grid-row: 2/3;1

short hand of grid-column-start, grid-column-end
grid-column: grid-column-start / grid-column-end;
grid-column: 2/3;

short hand of grid-row-start, grid-row-end --- grid-column-start, grid-column-end --- grid-row --- grid-column
grid-area:  grid-row-start/ grid-column-start / grid-row-end  / grid-column-end ;
grid-area: 2/1/3/2;

----------- GRID SPANNING
grid spanning -> in grid spaning grid occupay or enter in other coloumn also is called grid spanning.
grid-area: 1/1/2/3;

grid-row:1/span 3; it will cover the three row.
grid-column:1/span 3; it will cover the three column.

grid-row:1/-1; it will cover all row from starting to end
grid-column:1/-1; it will cover all coloumn from starting to end

----------- GRID LINE NAMING

it is used to name the line like given below
grid-template-columns: repeat(3,[col-start] 1fr[col-end]);
grid-template-rows: [header-start] 120px [header-end menu-start] 60px [menu-end box-start] 100px[box-end content-start] 400px[content-end footer-start] 50px [footer-end] ;

and how this is used 
grid-area: header-start/col-start 1/header-end/col-end 3;

----------- GRID AREA NAMING

it is used to name grid and style

grid-area: header;
grid-area: menu;
grid-area: box-2;
grid-area: box-1;
grid-area: aside;
grid-area: footer;

grid-template-areas: 

"header header .(it is used to make empty grid)"
"menu menu menu"
"box-1 box-2 aside"
"content content aside"
"footer footer footer"
;

----------- MIX MAX() FUNCTION, MAX-COTENT, MIN-CONTENT

max-content for coloumn -> it is used to give the grid cell the required width according to content (jitne content hai utna he width hote hai). it do not break the line if content is text content
grid-template-columns: max-content 1fr 1fr 1fr;

min-content coloumn -> jo sabse bada shabd hota hai utne he cell ke width hote hai.
grid-template-columns: 1fr 1fr 1fr min-content;
min content for row -> it will take height acording to content (jitna content hota hai utne he hight leta hai)

MIN MAX FOR ROW -> it will take minimum width  (jitne minimum height denge wo to lega par content badhne par apna height adjust kar lega)
grid-template-rows:  repeat(2, minmax(minimum-value, maximum-value));
grid-template-rows:  repeat(2, minmax(150px, min-content));
grid-template-columns: minmax(150px, 1fr) 1fr 1fr min-content;

----------- IMPLICIT AND EXPLICIT GRID

explicit grid -> those grid in which we defined there length explicit.
implicit grid -> those grid whose length is not defined if called implicit grid.

grid-auto-flows -> it is used to define the flow of grid cell means (jo naye grid cell bannenge wo kaha add honge row mai ya coloumn wo define karte by giveing row or coloum in value, default row he hota hai)
grid-auto-flow: column; by default is row

grid-auto-rows -> it is used to define the height of a implicit grid.
grid-auto-rows: 50px;

grid-auto-columns -> it is used to define the lenght of implicit grid in columns.

----------- ALIGNING GRID ITEMS

VERTICALLY ALIGNMENT OF GRID ITEM
Align-items -> it has four value center for center, end for end, start for start, strech for strech which is default and baseline for baseline aligment.
align-items:center;
align-items:baseline;
align-items:start;
align-items:end;
align-items:strech;

HORIZONTAL AIGNMENT OF GRID ITEMS
justify-items: baseline;
justify-items: start;
justify-items: end;
justify-items: center;
justify-items: strech;

SHORT HAND OF ALIGN-ITEMS, JUSTIY-ITEMS
place-items: align-items, justify-items;
place-items: center center;

-------------------------------------------

VERTICLE ALIGNMENT OF GRID SELF. (INDIVISUAL GRID CELL IS CALLED SELF)
align-self: center;
align-self: start;
align-self: end;
align-self: baseline;
align-self: strech;

HORIZONTAL ALIGNMENT OF GRID SELF. (INDIVISUAL GRID CELL IS CALLED SELF)
justify-self: baseline;
justify-self: start;
justify-self: end;
justify-self: center;
justify-self: strech;

SHORT HAND OF ALIGN-SELF, JUSTIY-SELF
place-self: align-self, justify-self;
place-self: center start;

-------------------------------------------

GRID TRACT ALIGNING PROPERTIES

justify-content -> it is used to align content like flex horizontaly.
justify-content: start;
justify-content: end;
justify-content: center;
justify-content: strech;
justify-content: space-around;
justify-content: space-between;
justify-content: space-evenly;

align-content -> it is used to align content like flex vertically.
align-content: start;
align-content: end;
align-content: center;
align-content: strech;
align-content: space-around;
align-content: space-between;
align-content: space-evenly;

place-content -> it is short hand of align-content and justify-content.
place-content: align-content justify-content;
place-content: space-evenly space-between;

----------- AUTO-FILL AND AUTO-FIT

grid-template-columns: repeat(auto-fill, 100px); -> it will create extra tracks if width is remaining.
grid-template-columns: repeat(auto-fit, 100px); -> it fit all the grid cell in the remaing spaces it does not goes in the next row until the width is covered

----------- FIT-CONTENT

fit-content -> it is used to give max-width of a content by default it will work as a max content but if content exced to its given width it will not axced to its given width
grid-template-columns: fit-content(200px) fit-content(300px) 1fr 1fr;

----------- ORDER
order -> it works same like order in flex.
order:1;

--------------------------------------------------------

QUE 18 :- What is transition?

CSS TRANSITION  

transition-property: all; 
it is used to define in what we have to add transition. we can define specificaly what we want to transition but in all value of transition property it will change all.

transition-duration: 2s;
it is used to define the duration of transition in given time it will complete the transition.

transition-delay: 2s;
it is used to define delay of transition it will starts or end the transition in given time.

transition-timing-function: ease;
it is used to define type of transition.


transition: property duration timting-function delay;
is is a short hand notaion of transition.
------

transition-property -> it is used to define on which property we want to applay transition we can applay on a single property or all at once.
transition-property: width; 
transition-property: all; 

transition-duration -> it is used to define duration of transition
transition-duration: 1s;

transition-delay -> it is used to define delay in transition
transition-delay: 1s;

transition-timing-function -> it is used to define the style of transition.
transition-timing-function: ease;

transition -> it is the short hand we can applay all the transition property at once.
transition: property, duration, timing function, delay;
transition: all 0.5s ease 1s; 




--------------------------------------------------------

QUE 19 :- What is transformation in css?


CSS 2D TRANSFORMATION  

1. Transform -> in transform we can rotate,move,scale,scew it only work with block or inline block element.

a. translate() -> it is used to move an element in x and y axis.

transform: translate(10px,10px);
transform: translate(x-axis,y-axis);

transform: translateY(10px);
transform: translateY(only y-axis);

transform: translateX(10px);
transform: translateX(only x-axis);

b. rotate() -> it is used to rorate an element.
transform:rotate(10deg);
transform:rotate(value in degree); by default rotate from its center

c. scale() -> it is used to increase size of an element

transform: scale(1,2);
transform: scale(width,height); it multiply current length by the provided value

transform: scaleX(2);
transform: scaleX(only width);

transform: scaleY(2);
transform: scaleY(only height);

d. skew -> it is used to rorate its sides
transform: skew(0deg, 0deg);
transform: skew(x-axis, y-axis);

transform: skewX(10deg);
transform: skewX(x-axis);

transform: skewY(10deg);
transform: skewY(y-axis);

e. transform origin -> we can also define the transform origin (from which point we want to rotate).
transform-origin: 50% 100%;
transform-origin:x-axis y-axis;

f. matix we can use all the transform property at once in matrix 
transform: matrix(scaleX(), scaleY(), skewX(), skewY(), translateX(), translateY()); 

CSS 3D TRANSFORMATION  

Transform rotateX ->
transform:perspective(800px) rotateX(50deg);

Transform rotateY ->
transform:perspective(800px) rotateY(50deg);

Transform rotateZ ->
transform:perspective(800px) rotateZ(50deg);

Transform translatez ->
transform:perspective(800px) rotateY(60deg) translateZ(200px);

Transform translate3d ->
transform:perspective(800px) rotateY(60deg) translate3d(50px, 50px, 1px);

Transform scaleZ ->
transform:perspective(800px) scaleZ(2) rotateY(60deg) ;

Transform scale3d ->
transform:perspective(800px) scale3d(2,2,2) rotateY(60deg) ;

--------------------------------------------------------

QUE 20 :- What is animation?
CSS ANIMATION


animation-name ->> it is used to define animation name.
animation-name: sample;


animation-duration ->> it is used to define duration.
animation-duration: 2s;

animation-iteration-count ->> it is used to define how many times we want play animation it can be 1,2,3--n or infinete
animation-iteration-count: infinite;

animation-delay ->> it is used to define delay to start animation
animation-delay: 2s;

animation-direction ->> it is used to define animation direction
animation-direction: alternate;

animation-timing-function ->> 
ease - slow start,then fast, then and slowly
linear - same speed start to end
ease-in - slow start
ease-out - slow end
ease-in-out - slow start and end
setp-start equivalent to setps (1,srart)
setp-end equivalent to setps (1,end)
setps(#, start/end) 
cubic-bezier lets your define your own values (0 to 1)

animation ->> short hand property 
animation: sample 2s ease 2s infinite alternate;
animation: name duration timing-function delay iteration-count direction fill-mode;

keyframe from to ->>

@keyframes sample {

    from {
        border-radius: 0%;
    }

    to {
        border-radius: 50%;
    }

}

@keyframes sample {

    0% {
        border-radius: 0%;
    }

    100% {
        border-radius: 50%;
    }

}SPECIFICITY 

In internal, external and inline css :-
inline css has top most priorty in all of them. And in internal and external css it depends which is written in last last one has most priorty.
has more priorty.

in element selector or class. class has more priorty.

in id class and inline css inline has more priorty.
if we target the element we want to style if we speficy them very accurately it will applay the more acurate style to element.

Specificity rule Trick (point system) - 

10000 point to !important
1000  point to inline
100   to id
10    to class, attribute or pseudo class
1     for element selector and pseudo element
0     to universal selector


1. in internal and external and inline inline has more priorty
2. in internal and external css which one link in last has more priorty.
3. if we write different style in same element/selector last one has more priorty.
4. if we select element more speficyly it will applay the more speficyly defined style in element
5. in class and id. id has more priorty

--------------------------------------------------------

QUE 21 :- What is specificity ?

SPECIFICITY 

In internal, external and inline css :-
inline css has top most priorty in all of them. And in internal and external css it depends which is written in last last one has most priorty.
has more priorty.

in element selector or class. class has more priorty.

in id class and inline css inline has more priorty.
if we target the element we want to style if we speficy them very accurately it will applay the more acurate style to element.

Specificity rule Trick (point system) - 

10000 point to !important
1000  point to inline
100   to id
10    to class, attribute or pseudo class
1     for element selector and pseudo element
0     to universal selector


1. in internal and external and inline inline has more priorty
2. in internal and external css which one link in last has more priorty.
3. if we write different style in same element/selector last one has more priorty.
4. if we select element more speficyly it will applay the more speficyly defined style in element
5. in class and id. id has more priorty.
