

/* 

Grid -> it is two dimensional layouting system which helps to manage horizontal and verticl aligment at the same time.

diaplay grid -> it is used initilize a container a grid box.
display: grid; 

----------- GRID CREATION

grid-template-columns -> it is used to define number and width of the coloumns.
grid-template-columns: 200px 200px 200px; -> it will create three coloumns of 200px in width.
grid-template-columns: 200px 200px auto; -> it will create first two coloumns of 200px and third coloumns will take remaining space.
grid-template-columns: 25% 25%; -> we can also define its width in percentage. it will create 2 coloumns of 25% width of it parent container.
grid-template-columns: 1fr 1fr; -> it is used to devide the coloumns in the given frection fr means frection i will create the two coloumn of same width it will decide the fullwidth in two frection of equal width
grid-template-columns: repeat(3, 1fr); -> it is used to repeat the given coloumns width we not have to write the width of coloumn every time.
grid-template-columns: repeat(2, 200px) 1fr; it is create first two coloumn of same width and third of one frection of the container.

grid-template-rows -> we can use all the decleration same as coloumns it will works on rows.

----------- GRID GAP

grid-gap -> it is use to define gap between coloumn and rows.
gap:1rem; -> i will applay gap in row and coloumn
gap: 1rem 1rem;
gap: row-gap coloumn-gap;

----------- GRID POSITINING

grid-row-start: 2; -> it is used to tell the start line of row.
grid-row-end: 3; -> it is used to tell the end line of row.
grid-column-start: 3; -> it is used to tell the start line of coloumn.
grid-column-end: 4; -> it is used to tell the end line of coloumn.

short hand of grid-row-start, grid-row-end
grid-row: grid-row-start / grid-row-end;
grid-row: 2/3;1

short hand of grid-column-start, grid-column-end
grid-column: grid-column-start / grid-column-end;
grid-column: 2/3;

short hand of grid-row-start, grid-row-end --- grid-column-start, grid-column-end --- grid-row --- grid-column
grid-area:  grid-row-start/ grid-column-start / grid-row-end  / grid-column-end ;
grid-area: 2/1/3/2;

----------- GRID SPANNING
grid spanning -> in grid spaning grid occupay or enter in other coloumn also is called grid spanning.
grid-area: 1/1/2/3;

grid-row:1/span 3; it will cover the three row.
grid-column:1/span 3; it will cover the three column.

grid-row:1/-1; it will cover all row from starting to end
grid-column:1/-1; it will cover all coloumn from starting to end

----------- GRID LINE NAMING

it is used to name the line like given below
grid-template-columns: repeat(3,[col-start] 1fr[col-end]);
grid-template-rows: [header-start] 120px [header-end menu-start] 60px [menu-end box-start] 100px[box-end content-start] 400px[content-end footer-start] 50px [footer-end] ;

and how this is used 
grid-area: header-start/col-start 1/header-end/col-end 3;

----------- GRID AREA NAMING

it is used to name grid and style

grid-area: header;
grid-area: menu;
grid-area: box-2;
grid-area: box-1;
grid-area: aside;
grid-area: footer;

grid-template-areas: 

"header header .(it is used to make empty grid)"
"menu menu menu"
"box-1 box-2 aside"
"content content aside"
"footer footer footer"
;

----------- MIX MAX() FUNCTION, MAX-COTENT, MIN-CONTENT

max-content for coloumn -> it is used to give the grid cell the required width according to content (jitne content hai utna he width hote hai). it do not break the line if content is text content
grid-template-columns: max-content 1fr 1fr 1fr;

min-content coloumn -> jo sabse bada shabd hota hai utne he cell ke width hote hai.
grid-template-columns: 1fr 1fr 1fr min-content;
min content for row -> it will take height acording to content (jitna content hota hai utne he hight leta hai)

MIN MAX FOR ROW -> it will take minimum width  (jitne minimum height denge wo to lega par content badhne par apna height adjust kar lega)
grid-template-rows:  repeat(2, minmax(minimum-value, maximum-value));
grid-template-rows:  repeat(2, minmax(150px, min-content));
grid-template-columns: minmax(150px, 1fr) 1fr 1fr min-content;

----------- IMPLICIT AND EXPLICIT GRID

explicit grid -> those grid in which we defined there length explicit.
implicit grid -> those grid whose length is not defined if called implicit grid.

grid-auto-flows -> it is used to define the flow of grid cell means (jo naye grid cell bannenge wo kaha add honge row mai ya coloumn wo define karte by giveing row or coloum in value, default row he hota hai)
grid-auto-flow: column; by default is row

grid-auto-rows -> it is used to define the height of a implicit grid.
grid-auto-rows: 50px;

grid-auto-columns -> it is used to define the lenght of implicit grid in columns.

----------- ALIGNING GRID ITEMS

VERTICALLY ALIGNMENT OF GRID ITEM
Align-items -> it has four value center for center, end for end, start for start, strech for strech which is default and baseline for baseline aligment.
align-items:center;
align-items:baseline;
align-items:start;
align-items:end;
align-items:strech;

HORIZONTAL AIGNMENT OF GRID ITEMS
justify-items: baseline;
justify-items: start;
justify-items: end;
justify-items: center;
justify-items: strech;

SHORT HAND OF ALIGN-ITEMS, JUSTIY-ITEMS
place-items: align-items, justify-items;
place-items: center center;

-------------------------------------------

VERTICLE ALIGNMENT OF GRID SELF. (INDIVISUAL GRID CELL IS CALLED SELF)
align-self: center;
align-self: start;
align-self: end;
align-self: baseline;
align-self: strech;

HORIZONTAL ALIGNMENT OF GRID SELF. (INDIVISUAL GRID CELL IS CALLED SELF)
justify-self: baseline;
justify-self: start;
justify-self: end;
justify-self: center;
justify-self: strech;

SHORT HAND OF ALIGN-SELF, JUSTIY-SELF
place-self: align-self, justify-self;
place-self: center start;

-------------------------------------------

GRID TRACT ALIGNING PROPERTIES

justify-content -> it is used to align content like flex horizontaly.
justify-content: start;
justify-content: end;
justify-content: center;
justify-content: strech;
justify-content: space-around;
justify-content: space-between;
justify-content: space-evenly;

align-content -> it is used to align content like flex vertically.
align-content: start;
align-content: end;
align-content: center;
align-content: strech;
align-content: space-around;
align-content: space-between;
align-content: space-evenly;

place-content -> it is short hand of align-content and justify-content.
place-content: align-content justify-content;
place-content: space-evenly space-between;

----------- AUTO-FILL AND AUTO-FIT

grid-template-columns: repeat(auto-fill, 100px); -> it will create extra tracks if width is remaining.
grid-template-columns: repeat(auto-fit, 100px); -> it fit all the grid cell in the remaing spaces it does not goes in the next row until the width is covered

----------- FIT-CONTENT

fit-content -> it is used to give max-width of a content by default it will work as a max content but if content exced to its given width it will not axced to its given width
grid-template-columns: fit-content(200px) fit-content(300px) 1fr 1fr;

----------- ORDER
order -> it works same like order in flex.
order:1;

*/

.grid-container{
    width: 70%;
    margin: 50px auto;
    background-color: blueviolet;
    color: #fff;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 200px 200px;
    gap: 50px;



}

.item{
    font-size: 20px;
    font-weight: bold;
    padding: 10px;
    text-align: center;
    border: 1px solid black;
}